// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum AccountStatus {
  ACTIVE
  PENDING
  SUSPENDED
  INACTIVE
}



model User {
  id         String   @id @default(cuid())
  name       String
  email      String   @unique
  password   String
  role       Role     @default(USER)
  status     AccountStatus @default(PENDING)
  verified   Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  sessions   Session[]
  verificationCodes VerificationCode[]
}

enum LoginAttemptStatus {
  SUCCESS
  FAILED
}

model Session {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  ipAddress  String?
  userAgent  String?
  attempt    LoginAttemptStatus @default(SUCCESS)
  loginAt    DateTime @default(now())
  expiresAt  DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum VerificationCodeStatus {
  PENDING
  USED
  EXPIRED
}

enum VerificationCodeType {
  ACCOUNT_ACTIVATION
  PASSWORD_RESET
  EMAIL_CHANGE
  PHONE_CHANGE
  TWO_FACTOR_AUTH
}

model VerificationCode {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  status     VerificationCodeStatus @default(PENDING)
  type       VerificationCodeType  @default(ACCOUNT_ACTIVATION)
  code       String
  expiresAt  DateTime
  verifiedAt DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}